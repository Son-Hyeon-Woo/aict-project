package org.kt.backend.service;

import java.time.LocalDateTime;
import java.util.Optional;
import lombok.extern.slf4j.Slf4j;
import org.kt.backend.dto.EmailAnalysisRequestDTO;
import org.kt.backend.dto.EmailAnalysisResponseDTO;
import org.kt.backend.dto.EmailRiskDTO;
import org.kt.backend.entity.Email;
import org.kt.backend.entity.EmailAttachment;
import org.kt.backend.entity.EmailRisk;
import org.kt.backend.repository.EmailRepository;
import org.kt.backend.repository.EmailRiskRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.reactive.function.client.WebClient;

@Slf4j
@Service
public class EmailAnalysisService {

  @Autowired
  private EmailRepository emailRepository;

  @Autowired
  private EmailRiskRepository emailRiskRepository;

  @Autowired
  private WebClient webClient;

  @Scheduled(fixedRate = 1000) // 10Ï¥àÎßàÎã§ Ïã§Ìñâ
  @Transactional
  public void analyzePendingEmails() {
    log.info("ÏßÑÌñâÏ†Ñ ÏÉÅÌÉúÏù∏ Ïù¥Î©îÏùº Í∞ÄÏ†∏Ïò§Í∏∞..");
    Optional<Email> optionalEmail = emailRepository.findFirstByProcessStatusOrderByReceivedDateAsc("ÏßÑÌñâÏ†Ñ");
    if (optionalEmail.isPresent()) {
      analyzeEmail(optionalEmail.get());
    }
  }

  @Transactional
  public void analyzeEmail(Email email) {
    // üëâ - Ïù¥Î©îÏùº Î∂ÑÏÑù ÏöîÏ≤≠ DTO ÏÉùÏÑ±
    EmailAnalysisRequestDTO requestDTO = new EmailAnalysisRequestDTO(email.getSender(), email.getContent().getContent(),
        email.getAttachments().isEmpty() ? null
            : email.getAttachments().stream().map(EmailAttachment::getFilePath)
                .collect(java.util.stream.Collectors.toList()));

    // üëâ - Ïù¥Î©îÏùº Î∂ÑÏÑù API Ìò∏Ï∂ú Î∞è ÏùëÎãµ ÏàòÏã†
    log.info("Î©îÏùº Î∂ÑÏÑù APIÎ°ú ÏöîÏ≤≠..");

    EmailAnalysisResponseDTO responseDTO = webClient.post().uri("http://localhost:8080/mock-api/email-analysis")
        .bodyValue(requestDTO)
        .retrieve().bodyToMono(EmailAnalysisResponseDTO.class).block();

    if (responseDTO != null) {
      EmailRiskDTO riskDTO = new EmailRiskDTO();
      riskDTO.setEmailNo(email.getEmailNo());

      // * Í∞íÏóê Îî∞ÎùºÏÑú RiskLevel Îã§Î•¥Í≤å Ï†ÅÏö©
      int riskScore = responseDTO.getRiskScore();

      if (riskScore >= 1 && riskScore <= 20) {
        riskDTO.setRiskLevel("ÏïàÏ†Ñ");
      } else if (riskScore > 20 && riskScore <= 70) {
        riskDTO.setRiskLevel("Î≥¥ÌÜµ");
      } else if (riskScore > 70 && riskScore <= 85) {
        riskDTO.setRiskLevel("ÏúÑÌóò");
      } else if (riskScore > 85 && riskScore <= 100) {
        riskDTO.setRiskLevel("Îß§Ïö∞ ÏúÑÌóò");
      }

      riskDTO.setRiskDetail(responseDTO.getRiskType());
      riskDTO.setDetectionDate(LocalDateTime.now());

      EmailRisk emailRisk = new EmailRisk();
      emailRisk.setEmail(email);
      emailRisk.setRiskLevel(riskDTO.getRiskLevel());
      emailRisk.setRiskDetail(riskDTO.getRiskDetail());
      emailRisk.setDetectionDate(riskDTO.getDetectionDate());

      emailRiskRepository.save(emailRisk);

      email.setRiskLevel(emailRisk);
      email.setProcessStatus("ÏôÑÎ£å");

      if (riskDTO.getRiskLevel().equals("ÏïàÏ†Ñ") || riskDTO.getRiskLevel().equals("Î≥¥ÌÜµ")) {
        email.setProcessResult("Ï†ÑÏÜ°");
      } else {
        email.setProcessResult("Ï∞®Îã®");
      }

      emailRepository.save(email);
      log.info("Ïù¥Î©îÏùº Î∂ÑÏÑù ÏôÑÎ£å");
    }
  }

}
